name: "NLC AI Dev"
services:
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro

  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # One-off init job to create an extra DB in the primary Postgres (optional)
  db_init:
    image: postgres:16
    container_name: db_init
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    entrypoint: [ "bash", "-lc" ]
    command: >-
      "until pg_isready -h postgres -p 5432 -U ${POSTGRES_USER}; do sleep 1; done;
      psql -h postgres -U ${POSTGRES_USER} -d postgres -c 'CREATE DATABASE ${POSTGRES_SHADOW_DB};' || true"
    restart: "no"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # Database migration service - runs once to apply migrations
  db_migrate:
    build:
      context: .
      dockerfile: ./apps/api/gateway/dev.Dockerfile
    container_name: db_migrate
    depends_on:
      - postgres
      - db_init
    environment:
      - NODE_ENV=development
    volumes:
      - ./.env:/app/.env
      - ./libs/api:/app/libs/api
    command: ["npm", "run", "db:deploy"]
    restart: "no"

  auth-service:
    build:
      context: .
      dockerfile: ./apps/api/auth/dev.Dockerfile
    container_name: auth_service
    restart: unless-stopped
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - rabbitmq
      - db_init
    environment:
      - NODE_ENV=development
    volumes:
      # Mount source code for hot reload
      - ./apps/api/auth:/app/apps/api/auth
      - ./libs/api:/app/libs/api
      - ./nx.json:/app/nx.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./.env:/app/.env
      # Prevent overwriting node_modules
      - /app/node_modules

  gateway-service:
    build:
      context: .
      dockerfile: ./apps/api/gateway/dev.Dockerfile
    container_name: gateway_service
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - rabbitmq
      - db_migrate
    environment:
      - NODE_ENV=development
    volumes:
      # Mount source code for hot reload
      - ./apps/api/gateway:/app/apps/api/gateway
      - ./libs/api:/app/libs/api
      - ./nx.json:/app/nx.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./.env:/app/.env
      # Prevent overwriting node_modules
      - /app/node_modules

  users-service:
    build:
      context: .
      dockerfile: ./apps/api/users/dev.Dockerfile
    container_name: users_service
    restart: no
    ports:
      - "3005:3005"
    depends_on:
      - postgres
      - rabbitmq
      - db_init
    environment:
      - NODE_ENV=development
    volumes:
      # Mount source code for hot reload
      - ./apps/api/users:/app/apps/api/users
      - ./libs/api:/app/libs/api
      - ./nx.json:/app/nx.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./.env:/app/.env
      # Prevent overwriting node_modules
      - /app/node_modules

  community-service:
    build:
      context: .
      dockerfile: ./apps/api/community/dev.Dockerfile
    container_name: community_service
    restart: unless-stopped
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - rabbitmq
      - db_init
    environment:
      - NODE_ENV=development
    volumes:
      # Mount source code for hot reload
      - ./apps/api/community:/app/apps/api/community
      - ./libs/api:/app/libs/api
      - ./nx.json:/app/nx.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./.env:/app/.env
      # Prevent overwriting node_modules
      - /app/node_modules

  leads-service:
    build:
      context: .
      dockerfile: ./apps/api/leads/dev.Dockerfile
    container_name: leads_service
    restart: unless-stopped
    ports:
      - "3003:3003"
    depends_on:
      - postgres
      - rabbitmq
      - db_init
    environment:
      - NODE_ENV=development
    volumes:
      # Mount source code for hot reload
      - ./apps/api/leads:/app/apps/api/leads
      - ./libs/api:/app/libs/api
      - ./nx.json:/app/nx.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./.env:/app/.env
      # Prevent overwriting node_modules
      - /app/node_modules

  media-service:
    build:
      context: .
      dockerfile: ./apps/api/media/dev.Dockerfile
    container_name: media_service
    restart: unless-stopped
    ports:
      - "3004:3004"
    depends_on:
      - postgres
      - rabbitmq
      - db_init
    environment:
      - NODE_ENV=development
    volumes:
      # Mount source code for hot reload
      - ./apps/api/media:/app/apps/api/media
      - ./libs/api:/app/libs/api
      - ./nx.json:/app/nx.json
      - ./tsconfig.json:/app/tsconfig.json
      - ./tsconfig.base.json:/app/tsconfig.base.json
      - ./.env:/app/.env
      # Prevent overwriting node_modules
      - /app/node_modules

volumes:
  pgadmin_data:
    driver: local
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
