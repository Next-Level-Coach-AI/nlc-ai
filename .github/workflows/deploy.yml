name: Build and Deploy NLC AI Nx Monorepo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.changes.outputs.web }}
      admin: ${{ steps.changes.outputs.admin }}
      coach: ${{ steps.changes.outputs.coach }}
      api: ${{ steps.changes.outputs.api }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'libs/**'
              - 'package*.json'
              - 'nx.json'
            admin:
              - 'apps/admin/**'
              - 'libs/**'
              - 'package*.json'
              - 'nx.json'
            coach:
              - 'apps/coach/**'
              - 'libs/**'
              - 'package*.json'
              - 'nx.json'
            api:
              - 'apps/api/**'
              - 'libs/types/**'
              - 'package*.json'
              - 'nx.json'

  #  build-web:
  #    needs: changes
  #    if: ${{ needs.changes.outputs.web == 'true' }}
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout repository
  #        uses: actions/checkout@v4
  #
  #      - name: Set up Docker Buildx
  #        uses: docker/setup-buildx-action@v3
  #
  #      - name: Log in to Docker Hub
  #        uses: docker/login-action@v3
  #        with:
  #          username: ${{ secrets.DOCKER_USERNAME }}
  #          password: ${{ secrets.DOCKER_PASSWORD }}

  #      - name: Build and push Web app
  #        uses: docker/build-push-action@v5
  #        with:
  #          context: .
  #          file: ./apps/web/Dockerfile
  #          push: true
  #          tags: ${{ env.REGISTRY }}/cetech/nlc-ai-web:latest
  #          cache-from: type=gha
  #          cache-to: type=gha,mode=max

  build-admin:
    needs: changes
    if: ${{ needs.changes.outputs.admin == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Admin app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/admin/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/cetech/nlc-ai-admin:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_ENV=production
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}

  build-coach:
    needs: changes
    if: ${{ needs.changes.outputs.coach == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Coach app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/coach/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/cetech/nlc-ai-coach:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_ENV=production
            NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }}
            NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}

  build-api:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/cetech/nlc-ai-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [changes, build-admin, build-coach, build-api]
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      #      - name: Deploy Web to Render
      #        if: ${{ needs.changes.outputs.web == 'true' }}
      #        run: |
      #          curl -X POST \
      #            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
      #            -H "Accept: application/json" \
      #            -H "Content-Type: application/json" \
      #            -d '{"clearCache": "clear"}' \
      #            https://api.render.com/v1/services/${{ secrets.RENDER_WEB_SERVICE_ID }}/deploys

      - name: Deploy Admin to Render
        if: ${{ needs.changes.outputs.admin == 'true' }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_ADMIN_SERVICE_ID }}/deploys

      - name: Deploy Coach to Render
        if: ${{ needs.changes.outputs.coach == 'true' }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_COACH_SERVICE_ID }}/deploys

      - name: Deploy API to Render
        if: ${{ needs.changes.outputs.api == 'true' }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_API_SERVICE_ID }}/deploys
