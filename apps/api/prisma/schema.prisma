generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeadType {
  coach_lead
  admin_lead
}

enum TransactionStatus {
  pending
  processing
  completed
  failed
  canceled
  refunded
  partially_refunded
}

enum PaymentMethodType {
  credit_card
  debit_card
  paypal
  bank_transfer
  stripe
  manual
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  canceled
  refunded
}

enum SubscriptionStatus {
  active
  canceled
  expired
  past_due
  trialing
  incomplete
  incomplete_expired
  unpaid
}

enum BillingCycle {
  monthly
  annual
}

model Admin {
  id             String          @id @default(uuid()) @db.Uuid
  email          String          @unique @db.VarChar(255)
  passwordHash   String          @db.VarChar(255)
  firstName      String          @db.VarChar(100)
  lastName       String          @db.VarChar(100)
  avatarUrl      String?
  role           String?         @default("admin") @db.VarChar(50)
  isActive       Boolean?        @default(true)
  lastLoginAt    DateTime?       @db.Timestamptz(6)
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @db.Timestamptz(6)
  notifications  Notification[]
  systemSettings SystemSetting[]

  @@map("admins")
}

model AiAgent {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @db.VarChar(100)
  type           String          @db.VarChar(50)
  description    String?
  isActive       Boolean?        @default(true)
  defaultConfig  Json?           @default("{}")
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @db.Timestamptz(6)
  aiInteractions AiInteraction[]
  coachAiAgents  CoachAiAgent[]

  @@map("ai_agents")
}

model AiInteraction {
  id               String    @id @default(uuid()) @db.Uuid
  coachID          String    @db.Uuid
  agentID          String    @db.Uuid
  clientID         String?   @db.Uuid
  interactionType  String    @db.VarChar(50)
  inputData        Json
  outputData       Json
  tokensUsed       Int?      @default(0)
  processingTimeMs Int?
  confidenceScore  Decimal?  @db.Decimal(3, 2)
  status           String?   @default("completed") @db.VarChar(50)
  errorMessage     String?
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  aiAgent          AiAgent   @relation(fields: [agentID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  client           Client?   @relation(fields: [clientID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  coach            Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([agentID], map: "idx_ai_interactions_agent_id")
  @@index([coachID], map: "idx_ai_interactions_coach_id")
  @@index([createdAt], map: "idx_ai_interactions_created_at")
  @@map("ai_interactions")
}

model Client {
  id                String             @id @default(uuid()) @db.Uuid
  coachID           String             @db.Uuid
  email             String             @db.VarChar(255)
  firstName         String             @db.VarChar(100)
  lastName          String             @db.VarChar(100)
  phone             String?            @db.VarChar(20)
  avatarUrl         String?
  status            String?            @default("active") @db.VarChar(50)
  source            String?            @db.VarChar(100)
  tags              String[]
  lastInteractionAt DateTime?          @db.Timestamptz(6)
  totalInteractions Int?               @default(0)
  engagementScore   Decimal?           @default(0.00) @db.Decimal(3, 2)
  customFields      Json?              @default("{}")
  createdAt         DateTime?          @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?          @default(now()) @db.Timestamptz(6)
  aiInteractions    AiInteraction[]
  coach             Coach              @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  courseEnrollments CourseEnrollment[]
  emailThreads      EmailThread[]

  @@unique([coachID, email])
  @@index([coachID], map: "idx_clients_coach_id")
  @@index([email], map: "idx_clients_email")
  @@index([lastInteractionAt], map: "idx_clients_last_interaction")
  @@index([status], map: "idx_clients_status")
  @@map("clients")
}

model CoachAiAgent {
  id               String    @id @default(uuid()) @db.Uuid
  coachID          String    @db.Uuid
  agentID          String    @db.Uuid
  isEnabled        Boolean?  @default(true)
  customConfig     Json?     @default("{}")
  fineTunedModelID String?   @db.VarChar(255)
  totalRequests    Int?      @default(0)
  totalTokensUsed  BigInt?   @default(0)
  lastUsedAt       DateTime? @db.Timestamptz(6)
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  aiAgent          AiAgent   @relation(fields: [agentID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  coach            Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([coachID, agentID])
  @@map("coach_ai_agents")
}

model Coach {
  id                  String              @id @default(uuid()) @db.Uuid
  email               String              @unique @db.VarChar(255)
  passwordHash        String?             @db.VarChar(255)
  firstName           String              @db.VarChar(100)
  lastName            String              @db.VarChar(100)
  businessName        String?             @db.VarChar(255)
  phone               String?             @db.VarChar(20)
  avatarUrl           String?
  bio                 String?
  websiteUrl          String?
  timezone            String?             @default("UTC") @db.VarChar(50)
  subscriptionStatus  String?             @default("trial") @db.VarChar(50)
  subscriptionPlan    String?             @db.VarChar(50)
  subscriptionEndsAt  DateTime?           @db.Timestamptz(6)
  stripeCustomerID    String?             @db.VarChar(255)
  isActive            Boolean?            @default(true)
  isVerified          Boolean?            @default(false)
  isDeleted           Boolean?            @default(false)
  deletedAt           DateTime?           @db.Timestamptz(6)
  lastLoginAt         DateTime?           @db.Timestamptz(6)
  onboardingCompleted Boolean?            @default(false)
  createdAt           DateTime?           @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime?           @default(now()) @db.Timestamptz(6)
  aiInteractions      AiInteraction[]
  clients             Client[]
  coachAiAgents       CoachAiAgent[]
  contentPieces       ContentPiece[]
  contentSuggestions  ContentSuggestion[]
  courses             Course[]
  dailyKPIs           DailyKPI[]
  emailAccounts       EmailAccount[]
  emailTemplates      EmailTemplate[]
  emailThreads        EmailThread[]
  integrations        Integration[]
  notifications       Notification[]
  paymentMethods      PaymentMethod[]
  transactions        Transaction[]
  invoices            Invoice[]
  subscriptions       Subscription[]
  leads               Lead[]
  paymentLinks        PaymentLink[]

  @@index([createdAt], map: "idx_coaches_created_at")
  @@index([email], map: "idx_coaches_email")
  @@index([subscriptionStatus], map: "idx_coaches_subscription_status")
  @@map("coaches")
}

model ContentCategory {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  description String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  contentPieces ContentPiece[]

  @@unique([name])
  @@map("content_categories")
}

model ContentPiece {
  id                    String          @id @default(uuid()) @db.Uuid
  coachID               String          @db.Uuid
  categoryID            String          @db.Uuid
  title                 String          @db.VarChar(500)
  contentType           String          @db.VarChar(50)
  platform              String?         @db.VarChar(50)
  platformID            String?         @db.VarChar(255)
  url                   String?
  description           String?
  tags                  String[]
  thumbnailUrl          String?
  durationSeconds       Int?
  views                 Int?            @default(0)
  likes                 Int?            @default(0)
  comments              Int?            @default(0)
  shares                Int?            @default(0)
  engagementRate        Decimal?        @default(0.00) @db.Decimal(5, 2)
  aiAnalyzed            Boolean?        @default(false)
  performancePrediction Decimal?        @db.Decimal(3, 2)
  topicCategories       String[]
  suggestedImprovements Json?           @default("[]")
  status                String?         @default("draft") @db.VarChar(50)
  publishedAt           DateTime?       @db.Timestamptz(6)
  createdAt             DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime?       @default(now()) @db.Timestamptz(6)
  category              ContentCategory @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  coach                 Coach           @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([coachID], map: "idx_content_pieces_coach_id")
  @@index([contentType], map: "idx_content_pieces_content_type")
  @@index([publishedAt], map: "idx_content_pieces_published_at")
  @@map("content_pieces")
}

model ContentSuggestion {
  id              String    @id @default(uuid()) @db.Uuid
  coachID         String    @db.Uuid
  title           String    @db.VarChar(500)
  contentType     String    @db.VarChar(50)
  platform        String?   @db.VarChar(50)
  description     String?
  reasoning       String?
  promptUsed      String?
  confidenceScore Decimal?  @db.Decimal(3, 2)
  trendData       Json?     @default("{}")
  status          String?   @default("pending") @db.VarChar(50)
  feedback        String?
  createdAt       DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @db.Timestamptz(6)
  coach           Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("content_suggestions")
}

model CourseEnrollment {
  id                    String    @id @default(uuid()) @db.Uuid
  courseID              String    @db.Uuid
  clientID              String    @db.Uuid
  enrolledAt            DateTime? @default(now()) @db.Timestamptz(6)
  startedAt             DateTime? @db.Timestamptz(6)
  completedAt           DateTime? @db.Timestamptz(6)
  progressPercentage    Decimal?  @default(0.00) @db.Decimal(5, 2)
  currentModule         Int?      @default(1)
  modulesCompleted      Int?      @default(0)
  lastActivityAt        DateTime? @db.Timestamptz(6)
  totalTimeSpentMinutes Int?      @default(0)
  loginCount            Int?      @default(0)
  daysSinceLastLogin    Int?      @default(0)
  status                String?   @default("active") @db.VarChar(50)
  dropoutRiskScore      Decimal?  @default(0.00) @db.Decimal(3, 2)
  recommendedActions    Json?     @default("[]")
  createdAt             DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime? @default(now()) @db.Timestamptz(6)
  client                Client    @relation(fields: [clientID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  course                Course    @relation(fields: [courseID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([courseID, clientID])
  @@index([clientID], map: "idx_course_enrollments_client_id")
  @@index([courseID], map: "idx_course_enrollments_course_id")
  @@index([status], map: "idx_course_enrollments_status")
  @@map("course_enrollments")
}

model Course {
  id                     String             @id @default(uuid()) @db.Uuid
  coachID                String             @db.Uuid
  title                  String             @db.VarChar(255)
  description            String?
  category               String?            @db.VarChar(100)
  difficultyLevel        String?            @db.VarChar(50)
  platform               String?            @db.VarChar(50)
  platformCourseID       String?            @db.VarChar(255)
  platformUrl            String?
  totalModules           Int?               @default(0)
  estimatedDurationHours Int?
  thumbnailUrl           String
  totalEnrollments       Int?               @default(0)
  activeEnrollments      Int?               @default(0)
  completionRate         Decimal?           @default(0.00) @db.Decimal(5, 2)
  isActive               Boolean?           @default(true)
  createdAt              DateTime?          @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime?          @default(now()) @db.Timestamptz(6)
  courseEnrollments      CourseEnrollment[]
  coach                  Coach              @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([coachID], map: "idx_courses_coach_id")
  @@map("courses")
}

model DailyKPI {
  id                     String    @id @default(uuid()) @db.Uuid
  coachID                String    @db.Uuid
  date                   DateTime  @db.Date
  totalClients           Int?      @default(0)
  newClients             Int?      @default(0)
  churnedClients         Int?      @default(0)
  activeClients          Int?      @default(0)
  totalInteractions      Int?      @default(0)
  avgEngagementScore     Decimal?  @default(0.00) @db.Decimal(5, 2)
  contentPiecesPublished Int?      @default(0)
  totalContentViews      Int?      @default(0)
  avgContentEngagement   Decimal?  @default(0.00) @db.Decimal(5, 2)
  newEnrollments         Int?      @default(0)
  courseCompletions      Int?      @default(0)
  avgCourseProgress      Decimal?  @default(0.00) @db.Decimal(5, 2)
  aiRequests             Int?      @default(0)
  aiTokensUsed           Int?      @default(0)
  emailsSent             Int?      @default(0)
  emailsOpened           Int?      @default(0)
  emailsClicked          Int?      @default(0)
  createdAt              DateTime? @default(now()) @db.Timestamptz(6)
  coach                  Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([coachID, date])
  @@index([coachID, date], map: "idx_daily_kpis_coach_id_date")
  @@map("daily_kpis")
}

model EmailAccount {
  id             String        @id @default(uuid()) @db.Uuid
  coachID        String        @db.Uuid
  emailAddress   String        @db.VarChar(255)
  provider       String        @db.VarChar(50)
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?     @db.Timestamptz(6)
  isPrimary      Boolean?      @default(false)
  isActive       Boolean?      @default(true)
  syncEnabled    Boolean?      @default(true)
  lastSyncAt     DateTime?     @db.Timestamptz(6)
  createdAt      DateTime?     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?     @default(now()) @db.Timestamptz(6)
  coach          Coach         @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  emailThreads   EmailThread[]

  @@unique([coachID, emailAddress])
  @@map("email_accounts")
}

model EmailMessage {
  id               String      @id @default(uuid()) @db.Uuid
  threadID         String      @db.Uuid
  messageID        String      @db.VarChar(255)
  senderEmail      String      @db.VarChar(255)
  recipientEmails  String[]
  ccEmails         String[]
  bccEmails        String[]
  subject          String?     @db.VarChar(500)
  bodyText         String?
  bodyHtml         String?
  attachments      Json?       @default("[]")
  aiProcessed      Boolean?    @default(false)
  sentimentScore   Decimal?    @db.Decimal(3, 2)
  intentCategory   String?     @db.VarChar(100)
  suggestedActions Json?       @default("[]")
  sentAt           DateTime    @db.Timestamptz(6)
  receivedAt       DateTime?   @default(now()) @db.Timestamptz(6)
  createdAt        DateTime?   @default(now()) @db.Timestamptz(6)
  emailThread      EmailThread @relation(fields: [threadID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sentAt], map: "idx_email_messages_sent_at")
  @@index([threadID], map: "idx_email_messages_thread_id")
  @@map("email_messages")
}

model EmailTemplate {
  id               String    @id @default(uuid()) @db.Uuid
  coachID          String    @db.Uuid
  name             String    @db.VarChar(255)
  category         String?   @db.VarChar(100)
  subjectTemplate  String?   @db.VarChar(500)
  bodyTemplate     String
  isAiGenerated    Boolean?  @default(false)
  generationPrompt String?
  usageCount       Int?      @default(0)
  lastUsedAt       DateTime? @db.Timestamptz(6)
  isActive         Boolean?  @default(true)
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  coach            Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("email_templates")
}

model EmailThread {
  id             String         @id @default(uuid()) @db.Uuid
  coachID        String         @db.Uuid
  clientID       String?        @db.Uuid
  emailAccountID String         @db.Uuid
  threadID       String         @db.VarChar(255)
  subject        String?        @db.VarChar(500)
  participants   String[]
  status         String?        @default("active") @db.VarChar(50)
  isRead         Boolean?       @default(false)
  priority       String?        @default("normal") @db.VarChar(20)
  messageCount   Int?           @default(0)
  lastMessageAt  DateTime?      @db.Timestamptz(6)
  createdAt      DateTime?      @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?      @default(now()) @db.Timestamptz(6)
  emailMessages  EmailMessage[]
  client         Client?        @relation(fields: [clientID], references: [id], onUpdate: NoAction)
  coach          Coach          @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  emailAccount   EmailAccount   @relation(fields: [emailAccountID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([clientID], map: "idx_email_threads_client_id")
  @@index([coachID], map: "idx_email_threads_coach_id")
  @@map("email_threads")
}

model Integration {
  id              String         @id @default(uuid()) @db.Uuid
  coachID         String         @db.Uuid
  integrationType String         @db.VarChar(50)
  platformName    String         @db.VarChar(100)
  accessToken     String?
  refreshToken    String?
  tokenExpiresAt  DateTime?      @db.Timestamptz(6)
  apiKey          String?
  webhookSecret   String?        @db.VarChar(255)
  config          Json?          @default("{}")
  syncSettings    Json?          @default("{}")
  isActive        Boolean?       @default(true)
  lastSyncAt      DateTime?      @db.Timestamptz(6)
  syncError       String?
  createdAt       DateTime?      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?      @default(now()) @db.Timestamptz(6)
  coach           Coach          @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  webhookEvents   WebhookEvent[]

  @@index([coachID], map: "idx_integrations_coach_id")
  @@map("integrations")
}

model Notification {
  id        String    @id @default(uuid()) @db.Uuid
  coachID   String?   @db.Uuid
  adminID   String?   @db.Uuid
  type      String    @db.VarChar(50)
  title     String    @db.VarChar(255)
  message   String
  actionUrl String?
  isRead    Boolean?  @default(false)
  readAt    DateTime? @db.Timestamptz(6)
  priority  String?   @default("normal") @db.VarChar(20)
  metadata  Json?     @default("{}")
  createdAt DateTime? @default(now()) @db.Timestamptz(6)
  admin     Admin?    @relation(fields: [adminID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  coach     Coach?    @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([adminID], map: "idx_notifications_admin_id")
  @@index([coachID], map: "idx_notifications_coach_id")
  @@index([isRead], map: "idx_notifications_is_read")
  @@map("notifications")
}

model PlatformAnalytic {
  id                      String    @id @default(uuid()) @db.Uuid
  date                    DateTime  @unique @db.Date
  totalCoaches            Int?      @default(0)
  activeCoaches           Int?      @default(0)
  newCoaches              Int?      @default(0)
  churnedCoaches          Int?      @default(0)
  totalRevenue            Decimal?  @default(0.00) @db.Decimal(12, 2)
  monthlyRecurringRevenue Decimal?  @default(0.00) @db.Decimal(12, 2)
  churnRate               Decimal?  @default(0.00) @db.Decimal(5, 2)
  totalAiRequests         Int?      @default(0)
  totalAiTokens           Int?      @default(0)
  totalEmailsProcessed    Int?      @default(0)
  avgResponseTimeMs       Int?      @default(0)
  uptimePercentage        Decimal?  @default(100.00) @db.Decimal(5, 2)
  createdAt               DateTime? @default(now()) @db.Timestamptz(6)

  @@index([date], map: "idx_platform_analytics_date")
  @@map("platform_analytics")
}

model WebhookEvent {
  id             String       @id @default(uuid()) @db.Uuid
  integrationID  String?      @db.Uuid
  eventType      String       @db.VarChar(100)
  eventData      Json
  sourcePlatform String       @db.VarChar(100)
  status         String?      @default("pending") @db.VarChar(50)
  processedAt    DateTime?    @db.Timestamptz(6)
  errorMessage   String?
  retryCount     Int?         @default(0)
  createdAt      DateTime?    @default(now()) @db.Timestamptz(6)
  integration    Integration? @relation(fields: [integrationID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([integrationID], map: "idx_webhook_events_integration_id")
  @@index([status], map: "idx_webhook_events_status")
  @@map("webhook_events")
}

model Transaction {
  id              String            @id @default(uuid()) @db.Uuid
  coachID         String            @db.Uuid
  subscriptionID  String?           @db.Uuid
  planID          String            @db.Uuid
  amount          Int
  currency        String            @default("USD")
  status          TransactionStatus @default(pending)
  paymentMethod   PaymentMethodType @default(stripe)
  stripePaymentID String?
  paypalOrderID   String?
  invoiceNumber   String?           @unique
  invoiceDate     DateTime
  dueDate         DateTime?
  paidAt          DateTime?
  description     String?
  metadata        Json?
  failureReason   String?
  refundReason    String?
  refundedAmount  Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  coach           Coach             @relation(fields: [coachID], references: [id], onDelete: Cascade)
  subscription    Subscription?     @relation(fields: [subscriptionID], references: [id], onDelete: SetNull)
  plan            Plan              @relation(fields: [planID], references: [id], onDelete: Restrict)
  invoices        Invoice[]

  @@map("transactions")
}

model PaymentMethod {
  id                    String            @id @default(uuid()) @db.Uuid
  coachID               String            @db.Uuid
  type                  PaymentMethodType
  isDefault             Boolean           @default(false)
  isActive              Boolean           @default(true)
  cardLast4             String?
  cardBrand             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  stripePaymentMethodID String?
  paypalEmail           String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  coach                 Coach             @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model Invoice {
  id             String        @id @default(uuid()) @db.Uuid
  coachID        String        @db.Uuid
  subscriptionID String?       @db.Uuid
  transactionID  String?       @db.Uuid
  invoiceNumber  String        @unique
  amount         Int
  currency       String        @default("USD")
  status         InvoiceStatus @default(draft)
  issueDate      DateTime      @default(now())
  dueDate        DateTime
  paidAt         DateTime?
  lineItems      Json
  subtotal       Int
  taxRate        Float?
  taxAmount      Int?
  discountAmount Int?
  total          Int
  notes          String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  coach          Coach         @relation(fields: [coachID], references: [id], onDelete: Cascade)
  subscription   Subscription? @relation(fields: [subscriptionID], references: [id], onDelete: SetNull)
  transaction    Transaction?  @relation(fields: [transactionID], references: [id], onDelete: SetNull)

  @@map("invoices")
}

model Plan {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @unique
  description   String?
  monthlyPrice  Int
  annualPrice   Int
  color         String?        @default("#7B21BA") @db.VarChar(50)
  maxClients    Int?
  maxAiAgents   Int?
  features      Json?
  isActive      Boolean        @default(true)
  isDeleted     Boolean        @default(false)
  deletedAt     DateTime?      @db.Timestamptz(6)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  transactions  Transaction[]
  paymentLinks  PaymentLink[]

  @@map("plans")
}

model Subscription {
  id                 String             @id @default(uuid()) @db.Uuid
  coachID            String             @db.Uuid
  planID             String             @db.Uuid
  status             SubscriptionStatus @default(active)
  billingCycle       BillingCycle       @default(monthly)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  canceledAt         DateTime?
  cancelReason       String?
  trialStart         DateTime?
  trialEnd           DateTime?
  nextBillingDate    DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  coach              Coach              @relation(fields: [coachID], references: [id], onDelete: Cascade)
  plan               Plan               @relation(fields: [planID], references: [id], onDelete: Restrict)
  transactions       Transaction[]
  invoices           Invoice[]

  @@map("subscriptions")
}

model Lead {
  id              String    @id @default(uuid()) @db.Uuid
  coachID         String?   @db.Uuid // Made nullable to support admin leads
  leadType        LeadType  @default(coach_lead)
  firstName       String    @db.VarChar(100)
  lastName        String    @db.VarChar(100)
  email           String    @db.VarChar(255)
  phone           String?   @db.VarChar(20)
  source          String?   @db.VarChar(100)
  status          String    @default("contacted") @db.VarChar(50) // contacted, scheduled, converted, unresponsive
  meetingDate     DateTime? @db.Timestamptz(6)
  meetingTime     String?   @db.VarChar(20)
  notes           String?
  lastContactedAt DateTime? @db.Timestamptz(6)
  convertedAt     DateTime? @db.Timestamptz(6)
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @db.Timestamptz(6)
  coach           Coach?    @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@map("leads")
}

model ActivityLog {
  id         String   @id @default(uuid()) @db.Uuid
  userID     String   @db.Uuid
  userType   String   @db.VarChar(20) // "admin" or "coach"
  action     String   @db.VarChar(100)
  entityType String?  @db.VarChar(50)
  entityID   String?  @db.Uuid
  metadata   Json?
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  @@index([userID, userType])
  @@index([createdAt])
  @@map("activity_logs")
}

model SystemSetting {
  id          String   @id @default(uuid()) @db.Uuid
  category    String   @db.VarChar(50)
  key         String   @db.VarChar(100)
  value       Json
  description String?
  isPublic    Boolean  @default(false)
  updatedBy   String   @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  admin       Admin    @relation(fields: [updatedBy], references: [id])

  @@unique([category, key])
  @@map("system_settings")
}

model PaymentLink {
  id                  String    @id @default(uuid()) @db.Uuid
  coachID             String    @db.Uuid
  planID              String    @db.Uuid
  stripePaymentLinkID String    @unique
  paymentLinkUrl      String
  amount              Int
  currency            String    @default("USD")
  description         String?
  isActive            Boolean   @default(true)
  paymentsReceived    Int       @default(0)
  totalAmountReceived Int       @default(0)
  expiresAt           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  coach               Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade)
  plan                Plan      @relation(fields: [planID], references: [id], onDelete: Restrict)

  @@map("payment_links")
}
