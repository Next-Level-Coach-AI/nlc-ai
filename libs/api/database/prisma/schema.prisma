generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum EventOutboxStatus {
  pending
  published
  failed
}

enum Providers {
  google
}

enum LeadType {
  coach_lead
  admin_lead
}

enum TransactionStatus {
  pending
  processing
  completed
  failed
  canceled
  refunded
  partially_refunded
}

enum PaymentMethodType {
  credit_card
  debit_card
  paypal
  bank_transfer
  stripe
  manual
}

enum InvoiceStatus {
  draft
  sent
  paid
  overdue
  canceled
  refunded
}

enum SubscriptionStatus {
  active
  canceled
  expired
  past_due
  trialing
  incomplete
  incomplete_expired
  unpaid
}

enum BillingCycle {
  monthly
  annual
}

model Admin {
  id             String          @id @default(uuid()) @db.Uuid
  email          String          @unique @db.VarChar(255)
  passwordHash   String          @db.VarChar(255)
  firstName      String          @db.VarChar(100)
  lastName       String          @db.VarChar(100)
  avatarUrl      String?
  role           String?         @default("admin") @db.VarChar(50)
  isActive       Boolean?        @default(true)
  lastLoginAt    DateTime?       @db.Timestamptz(6)
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @db.Timestamptz(6)
  systemSettings SystemSetting[]

  @@map("admins")
}

model AiAgent {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @unique @db.VarChar(100)
  type           String          @db.VarChar(50)
  description    String?
  isActive       Boolean?        @default(true)
  defaultConfig  Json?           @default("{}")
  createdAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?       @default(now()) @db.Timestamptz(6)
  aiInteractions AiInteraction[]
  coachAiAgents  CoachAiAgent[]

  @@map("ai_agents")
}

model AiInteraction {
  id               String    @id @default(uuid()) @db.Uuid
  coachID          String    @db.Uuid
  agentID          String    @db.Uuid
  clientID         String?   @db.Uuid
  interactionType  String    @db.VarChar(50)
  inputData        Json
  outputData       Json
  tokensUsed       Int?      @default(0)
  processingTimeMs Int?
  confidenceScore  Decimal?  @db.Decimal(3, 2)
  status           String?   @default("completed") @db.VarChar(50)
  errorMessage     String?
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  aiAgent          AiAgent   @relation(fields: [agentID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  client           Client?   @relation(fields: [clientID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  coach            Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([agentID], map: "idx_ai_interactions_agent_id")
  @@index([coachID], map: "idx_ai_interactions_coach_id")
  @@index([createdAt], map: "idx_ai_interactions_created_at")
  @@map("ai_interactions")
}

model Client {
  id                String     @id @default(uuid()) @db.Uuid
  passwordHash      String?    @db.VarChar(255)
  email             String     @unique @db.VarChar(255)
  provider          Providers?
  providerID        String?
  firstName         String     @db.VarChar(100)
  lastName          String     @db.VarChar(100)
  phone             String?    @db.VarChar(20)
  avatarUrl         String?
  source            String?    @db.VarChar(100)
  tags              String[]
  lastInteractionAt DateTime?  @db.Timestamptz(6)
  totalInteractions Int?       @default(0)
  engagementScore   Decimal?   @default(0.00) @db.Decimal(3, 2)
  customFields      Json?      @default("{}")
  isActive          Boolean?   @default(true)
  isVerified        Boolean?   @default(false)
  isDeleted         Boolean?   @default(false)
  deletedAt         DateTime?  @db.Timestamptz(6)
  lastLoginAt       DateTime?  @db.Timestamptz(6)
  createdAt         DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime?  @default(now()) @db.Timestamptz(6)

  aiInteractions    AiInteraction[]
  courseEnrollments CourseEnrollment[]
  emailThreads      EmailThread[]
  scheduledEmails   ScheduledEmail[]
  clientCoaches     ClientCoach[]
  EmailSequence     EmailSequence[]

  @@index([email], map: "idx_clients_email")
  @@index([lastInteractionAt], map: "idx_clients_last_interaction")
  @@map("clients")
}

enum ClientCoachStatus {
  active
  inactive
  pending
}

enum ClientCoachRole {
  client
  lead
  prospect
}

model ClientCoach {
  id         String            @id @default(uuid()) @db.Uuid
  clientID   String            @db.Uuid
  coachID    String            @db.Uuid
  status     ClientCoachStatus @default(active)
  role       ClientCoachRole?  @default(client)
  assignedAt DateTime          @default(now()) @db.Timestamptz(6)
  assignedBy String?           @db.Uuid // Which coach/admin assigned this relationship
  notes      String? // Coach-specific notes about this client
  isPrimary  Boolean           @default(false) // Which coach is the primary coach
  createdAt  DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime          @updatedAt @db.Timestamptz(6)

  client Client @relation(fields: [clientID], references: [id], onDelete: Cascade)
  coach  Coach  @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@unique([clientID, coachID]) // Prevent duplicate relationships
  @@index([clientID])
  @@index([coachID])
  @@index([status])
  @@map("client_coaches")
}

model ClientInvite {
  id        String    @id @default(uuid()) @db.Uuid
  coachID   String    @db.Uuid
  email     String    @db.VarChar(255)
  token     String    @unique @db.VarChar(255)
  role      String?   @default("client") @db.VarChar(50)
  message   String? // Personal message from coach
  expiresAt DateTime  @db.Timestamptz(6)
  usedAt    DateTime? @db.Timestamptz(6)
  usedBy    String?   @db.Uuid // Which client used this invite
  createdAt DateTime  @default(now()) @db.Timestamptz(6)

  coach Coach @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@index([coachID])
  @@index([email])
  @@index([token])
  @@map("client_invites")
}

model CoachAiAgent {
  id               String    @id @default(uuid()) @db.Uuid
  coachID          String    @db.Uuid
  agentID          String    @db.Uuid
  isEnabled        Boolean?  @default(true)
  customConfig     Json?     @default("{}")
  fineTunedModelID String?   @db.VarChar(255)
  totalRequests    Int?      @default(0)
  totalTokensUsed  BigInt?   @default(0)
  lastUsedAt       DateTime? @db.Timestamptz(6)
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  aiAgent          AiAgent   @relation(fields: [agentID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  coach            Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([coachID, agentID])
  @@map("coach_ai_agents")
}

model Coach {
  id                  String     @id @default(uuid()) @db.Uuid
  email               String     @unique @db.VarChar(255)
  passwordHash        String?    @db.VarChar(255)
  provider            Providers?
  providerID          String?
  firstName           String     @db.VarChar(100)
  lastName            String     @db.VarChar(100)
  businessName        String?    @db.VarChar(255)
  phone               String?    @db.VarChar(20)
  avatarUrl           String?
  bio                 String?
  websiteUrl          String?
  customDomain        String?    @db.VarChar(255)
  timezone            String?    @default("UTC") @db.VarChar(50)
  subscriptionStatus  String?    @default("trial") @db.VarChar(50)
  subscriptionPlan    String?    @db.VarChar(50)
  subscriptionEndsAt  DateTime?  @db.Timestamptz(6)
  stripeCustomerID    String?    @db.VarChar(255)
  isActive            Boolean?   @default(true)
  isVerified          Boolean?   @default(false)
  isDeleted           Boolean?   @default(false)
  deletedAt           DateTime?  @db.Timestamptz(6)
  lastLoginAt         DateTime?  @db.Timestamptz(6)
  onboardingCompleted Boolean?   @default(false)
  createdAt           DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime?  @default(now()) @db.Timestamptz(6)

  aiInteractions     AiInteraction[]
  coachAiAgents      CoachAiAgent[]
  contentPieces      ContentPiece[]
  contentSuggestions ContentSuggestion[]
  courses            Course[]
  dailyKPIs          DailyKPI[]
  emailAccounts      EmailAccount[]
  emailTemplates     EmailTemplate[]
  emailThreads       EmailThread[]
  integrations       Integration[]
  paymentMethods     PaymentMethod[]
  transactions       Transaction[]
  invoices           Invoice[]
  subscriptions      Subscription[]
  leads              Lead[]
  paymentLinks       PaymentLink[]
  contentCategories  ContentCategory[]
  emailSequences     EmailSequence[]
  scheduledEmails    ScheduledEmail[]

  clientCoaches ClientCoach[]
  clientInvites ClientInvite[]

  @@index([createdAt], map: "idx_coaches_created_at")
  @@index([email], map: "idx_coaches_email")
  @@index([subscriptionStatus], map: "idx_coaches_subscription_status")
  @@map("coaches")
}

enum CommunityType {
  coach_client
  coach_to_coach
  course
  private
}

enum CommunityVisibility {
  public
  private
  invite_only
}

enum MemberRole {
  owner
  admin
  moderator
  member
}

enum MemberStatus {
  active
  inactive
  suspended
  pending
}

enum PostType {
  text
  image
  video
  link
  poll
  event
}

enum ReactionType {
  like
  love
  laugh
  angry
  sad
  celebrate
}

enum CommunityPricingType {
  free
  monthly
  annual
  one_time
}

model Community {
  id          String              @id @default(uuid()) @db.Uuid
  name        String              @db.VarChar(255)
  description String?             @db.Text
  type        CommunityType
  visibility  CommunityVisibility @default(private)
  ownerID     String              @db.Uuid
  ownerType   String              @db.VarChar(20)
  coachID     String?             @db.Uuid
  courseID    String?             @db.Uuid
  avatarUrl   String?
  bannerUrl   String?
  slug        String              @unique @db.VarChar(100)

  pricingType     CommunityPricingType @default(free)
  pricingAmount   Int?
  pricingCurrency String?              @default("USD") @db.VarChar(3)

  isSystemCreated Boolean @default(false)

  settings    Json     @default("{}")
  memberCount Int      @default(0)
  postCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  members CommunityMember[]
  posts   Post[]
  invites CommunityInvite[]

  @@index([type])
  @@index([pricingType])
  @@index([coachID])
  @@index([courseID])
  @@index([ownerID, ownerType])
  @@index([isSystemCreated])
  @@index([createdAt])
  @@map("communities")
}

model CommunityMember {
  id           String       @id @default(uuid()) @db.Uuid
  communityID  String       @db.Uuid
  userID       String       @db.Uuid
  userType     String       @db.VarChar(20) // 'coach', 'admin', 'client'
  role         MemberRole   @default(member)
  status       MemberStatus @default(active)
  joinedAt     DateTime     @default(now()) @db.Timestamptz(6)
  lastActiveAt DateTime?    @db.Timestamptz(6)
  invitedBy    String?      @db.Uuid
  customTitle  String?      @db.VarChar(100)
  permissions  String[]     @default([])

  community Community @relation(fields: [communityID], references: [id], onDelete: Cascade)

  @@unique([communityID, userID, userType])
  @@index([userID, userType])
  @@index([communityID])
  @@index([status])
  @@map("community_members")
}

model CommunityInvite {
  id          String    @id @default(uuid()) @db.Uuid
  communityID String    @db.Uuid
  inviterID   String    @db.Uuid
  inviterType String    @db.VarChar(20)
  inviteeID   String    @db.Uuid
  inviteeType String    @db.VarChar(20)
  message     String?   @db.Text
  token       String    @unique @db.VarChar(255)
  status      String    @default("pending") @db.VarChar(20) // pending, accepted, declined, expired
  expiresAt   DateTime  @db.Timestamptz(6)
  acceptedAt  DateTime? @db.Timestamptz(6)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)

  community Community @relation(fields: [communityID], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([inviteeID, inviteeType])
  @@index([status])
  @@map("community_invites")
}

model Post {
  id              String   @id @default(uuid()) @db.Uuid
  communityID     String   @db.Uuid
  authorID        String   @db.Uuid
  authorType      String   @db.VarChar(20)
  authorName      String   @db.VarChar(255) // NEW FIELD
  authorAvatarUrl String?  @db.Text // NEW FIELD
  type            PostType @default(text)
  content         String   @db.Text
  mediaUrls       String[] @default([])
  linkUrl         String?
  linkPreview     Json?    @default("{}")
  pollOptions     String[] @default([])
  eventData       Json?    @default("{}")
  isPinned        Boolean  @default(false)
  isEdited        Boolean  @default(false)
  likeCount       Int      @default(0)
  commentCount    Int      @default(0)
  shareCount      Int      @default(0)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  community Community      @relation(fields: [communityID], references: [id], onDelete: Cascade)
  comments  PostComment[]
  reactions PostReaction[]

  @@index([communityID])
  @@index([authorID, authorType])
  @@index([authorName]) // NEW INDEX
  @@index([type])
  @@index([createdAt])
  @@index([isPinned])
  @@map("posts")
}

model PostComment {
  id              String   @id @default(uuid()) @db.Uuid
  postID          String   @db.Uuid
  authorID        String   @db.Uuid
  authorType      String   @db.VarChar(20)
  authorName      String   @db.VarChar(255) // NEW FIELD
  authorAvatarUrl String?  @db.Text // NEW FIELD
  content         String   @db.Text
  mediaUrls       String[] @default([])
  parentCommentID String?  @db.Uuid
  likeCount       Int      @default(0)
  replyCount      Int      @default(0)
  isEdited        Boolean  @default(false)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  post          Post           @relation(fields: [postID], references: [id], onDelete: Cascade)
  parentComment PostComment?   @relation("CommentReplies", fields: [parentCommentID], references: [id])
  replies       PostComment[]  @relation("CommentReplies")
  reactions     PostReaction[]

  @@index([postID])
  @@index([authorID, authorType])
  @@index([authorName]) // NEW INDEX
  @@index([parentCommentID])
  @@index([createdAt])
  @@map("post_comments")
}

model PostReaction {
  id        String       @id @default(uuid()) @db.Uuid
  postID    String?      @db.Uuid
  commentID String?      @db.Uuid
  userID    String       @db.Uuid
  userType  String       @db.VarChar(20)
  type      ReactionType @default(like)
  createdAt DateTime     @default(now()) @db.Timestamptz(6)

  post    Post?        @relation(fields: [postID], references: [id], onDelete: Cascade)
  comment PostComment? @relation(fields: [commentID], references: [id], onDelete: Cascade)

  @@unique([postID, userID, userType])
  @@unique([commentID, userID, userType])
  @@index([userID, userType])
  @@index([type])
  @@map("post_reactions")
}

model CommunityAnalytics {
  id             String   @id @default(uuid()) @db.Uuid
  communityID    String   @db.Uuid
  date           DateTime @db.Date
  newMembers     Int      @default(0)
  totalMembers   Int      @default(0)
  newPosts       Int      @default(0)
  totalPosts     Int      @default(0)
  newComments    Int      @default(0)
  totalComments  Int      @default(0)
  newReactions   Int      @default(0)
  totalReactions Int      @default(0)
  activeUsers    Int      @default(0)
  engagementRate Float    @default(0)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)

  @@unique([communityID, date])
  @@index([date])
  @@map("community_analytics")
}

model ContentCategory {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  coachID     String?  @db.Uuid // Made optional for global categories
  description String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  coach       Coach?   @relation(fields: [coachID], references: [id], onDelete: Cascade)

  contentPieces ContentPiece[]

  @@unique([name, coachID])
  @@index([coachID])
  @@map("content_categories")
}

model ContentPiece {
  id                    String          @id @default(uuid()) @db.Uuid
  coachID               String          @db.Uuid
  categoryID            String          @db.Uuid
  title                 String          @db.VarChar(500)
  contentType           String          @db.VarChar(50)
  platform              String?         @db.VarChar(50)
  platformID            String?         @db.VarChar(255)
  url                   String?
  description           String?
  tags                  String[]
  thumbnailUrl          String?
  durationSeconds       Int?
  views                 Int?            @default(0)
  likes                 Int?            @default(0)
  comments              Int?            @default(0)
  shares                Int?            @default(0)
  engagementRate        Decimal?        @default(0.00) @db.Decimal(5, 2)
  aiAnalyzed            Boolean?        @default(false)
  performancePrediction Decimal?        @db.Decimal(3, 2)
  topicCategories       String[]
  suggestedImprovements Json?           @default("[]")
  status                String?         @default("draft") @db.VarChar(50)
  publishedAt           DateTime?       @db.Timestamptz(6)
  createdAt             DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime?       @default(now()) @db.Timestamptz(6)
  category              ContentCategory @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  coach                 Coach           @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([coachID], map: "idx_content_pieces_coach_id")
  @@index([contentType], map: "idx_content_pieces_content_type")
  @@index([publishedAt], map: "idx_content_pieces_published_at")
  @@map("content_pieces")
}

model ContentSuggestion {
  id              String    @id @default(uuid()) @db.Uuid
  coachID         String    @db.Uuid
  title           String    @db.VarChar(500)
  contentType     String    @db.VarChar(50)
  platform        String?   @db.VarChar(50)
  description     String?
  reasoning       String?
  promptUsed      String?
  confidenceScore Decimal?  @db.Decimal(3, 2)
  trendData       Json?     @default("{}")
  status          String?   @default("pending") @db.VarChar(50)
  feedback        String?
  createdAt       DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime? @default(now()) @db.Timestamptz(6)
  coach           Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("content_suggestions")
}

model CourseEnrollment {
  id                    String    @id @default(uuid()) @db.Uuid
  courseID              String    @db.Uuid
  clientID              String    @db.Uuid
  enrolledByCoachID     String?   @db.Uuid // Which coach enrolled this client
  enrolledAt            DateTime? @default(now()) @db.Timestamptz(6)
  startedAt             DateTime? @db.Timestamptz(6)
  completedAt           DateTime? @db.Timestamptz(6)
  progressPercentage    Decimal?  @default(0.00) @db.Decimal(5, 2)
  currentModule         Int?      @default(1)
  modulesCompleted      Int?      @default(0)
  lastActivityAt        DateTime? @db.Timestamptz(6)
  totalTimeSpentMinutes Int?      @default(0)
  loginCount            Int?      @default(0)
  daysSinceLastLogin    Int?      @default(0)
  status                String?   @default("active") @db.VarChar(50)
  dropoutRiskScore      Decimal?  @default(0.00) @db.Decimal(3, 2)
  recommendedActions    Json?     @default("[]")
  createdAt             DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime? @default(now()) @db.Timestamptz(6)

  client Client @relation(fields: [clientID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  course Course @relation(fields: [courseID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([courseID, clientID])
  @@index([clientID], map: "idx_course_enrollments_client_id")
  @@index([courseID], map: "idx_course_enrollments_course_id")
  @@index([status], map: "idx_course_enrollments_status")
  @@map("course_enrollments")
}

model Course {
  id                     String             @id @default(uuid()) @db.Uuid
  coachID                String             @db.Uuid
  title                  String             @db.VarChar(255)
  description            String?
  category               String?            @db.VarChar(100)
  difficultyLevel        String?            @db.VarChar(50)
  platform               String?            @db.VarChar(50)
  platformCourseID       String?            @db.VarChar(255)
  platformUrl            String?
  totalModules           Int?               @default(0)
  estimatedDurationHours Int?
  thumbnailUrl           String
  totalEnrollments       Int?               @default(0)
  activeEnrollments      Int?               @default(0)
  completionRate         Decimal?           @default(0.00) @db.Decimal(5, 2)
  isActive               Boolean?           @default(true)
  createdAt              DateTime?          @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime?          @default(now()) @db.Timestamptz(6)
  courseEnrollments      CourseEnrollment[]
  coach                  Coach              @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([coachID], map: "idx_courses_coach_id")
  @@map("courses")
}

model DailyKPI {
  id                     String    @id @default(uuid()) @db.Uuid
  coachID                String    @db.Uuid
  date                   DateTime  @db.Date
  totalClients           Int?      @default(0)
  newClients             Int?      @default(0)
  churnedClients         Int?      @default(0)
  activeClients          Int?      @default(0)
  totalInteractions      Int?      @default(0)
  avgEngagementScore     Decimal?  @default(0.00) @db.Decimal(5, 2)
  contentPiecesPublished Int?      @default(0)
  totalContentViews      Int?      @default(0)
  avgContentEngagement   Decimal?  @default(0.00) @db.Decimal(5, 2)
  newEnrollments         Int?      @default(0)
  courseCompletions      Int?      @default(0)
  avgCourseProgress      Decimal?  @default(0.00) @db.Decimal(5, 2)
  aiRequests             Int?      @default(0)
  aiTokensUsed           Int?      @default(0)
  emailsSent             Int?      @default(0)
  emailsOpened           Int?      @default(0)
  emailsClicked          Int?      @default(0)
  createdAt              DateTime? @default(now()) @db.Timestamptz(6)
  coach                  Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([coachID, date])
  @@index([coachID, date], map: "idx_daily_kpis_coach_id_date")
  @@map("daily_kpis")
}

enum EmailStatus {
  pending
  scheduled
  processing
  sent
  delivered
  opened
  clicked
  failed
  bounced
  simulated
}

enum SequenceStatus {
  active
  paused
  completed
  cancelled
}

model EmailAccount {
  id             String        @id @default(uuid()) @db.Uuid
  coachID        String        @db.Uuid
  emailAddress   String        @db.VarChar(255)
  provider       String        @db.VarChar(50)
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?     @db.Timestamptz(6)
  isPrimary      Boolean?      @default(false)
  isActive       Boolean?      @default(true)
  syncEnabled    Boolean?      @default(true)
  lastSyncAt     DateTime?     @db.Timestamptz(6)
  createdAt      DateTime?     @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?     @default(now()) @db.Timestamptz(6)
  coach          Coach         @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  emailThreads   EmailThread[]

  @@unique([coachID, emailAddress])
  @@map("email_accounts")
}

model EmailMessage {
  id                String      @id @default(uuid()) @db.Uuid
  threadID          String      @db.Uuid
  emailTemplateID   String?     @db.Uuid
  providerMessageID String      @unique @db.VarChar(255)
  to                String      @db.VarChar(255)
  from              String      @db.VarChar(255)
  // recipientEmails  String[]
  // ccEmails         String[]
  // bccEmails        String[]
  subject           String?     @db.VarChar(500)
  text              String?
  html              String?
  attachments       Json?       @default("[]")
  aiProcessed       Boolean?    @default(false)
  sentimentScore    Decimal?    @db.Decimal(3, 2)
  intentCategory    String?     @db.VarChar(100)
  suggestedActions  Json?       @default("[]")
  status            EmailStatus @default(pending)
  errorMessage      String?
  metadata          Json?       @default("{}")
  openedAt          DateTime?   @db.Timestamptz(6)
  clickedAt         DateTime?   @db.Timestamptz(6)
  sentAt            DateTime    @db.Timestamptz(6)
  receivedAt        DateTime?   @default(now()) @db.Timestamptz(6)
  createdAt         DateTime?   @default(now()) @db.Timestamptz(6)

  emailThread   EmailThread    @relation(fields: [threadID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  emailTemplate EmailTemplate? @relation(fields: [emailTemplateID], references: [id])

  @@index([status])
  @@index([sentAt], map: "idx_email_messages_sent_at")
  @@index([threadID], map: "idx_email_messages_thread_id")
  @@map("email_messages")
}

model EmailTemplate {
  id               String    @id @default(uuid()) @db.Uuid
  coachID          String    @db.Uuid
  name             String    @db.VarChar(255)
  category         String?   @db.VarChar(100)
  subjectTemplate  String?   @db.VarChar(500)
  bodyTemplate     String
  isAiGenerated    Boolean?  @default(false)
  generationPrompt String?
  usageCount       Int?      @default(0)
  lastUsedAt       DateTime? @db.Timestamptz(6)
  isActive         Boolean?  @default(true)
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  coach            Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  emailMessages EmailMessage[]

  @@map("email_templates")
}

model EmailThread {
  id             String         @id @default(uuid()) @db.Uuid
  coachID        String         @db.Uuid
  clientID       String?        @db.Uuid
  emailAccountID String         @db.Uuid
  threadID       String         @db.VarChar(255)
  subject        String?        @db.VarChar(500)
  participants   String[]
  status         String?        @default("active") @db.VarChar(50)
  isRead         Boolean?       @default(false)
  priority       String?        @default("normal") @db.VarChar(20)
  messageCount   Int?           @default(0)
  lastMessageAt  DateTime?      @db.Timestamptz(6)
  createdAt      DateTime?      @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime?      @default(now()) @db.Timestamptz(6)
  emailMessages  EmailMessage[]
  client         Client?        @relation(fields: [clientID], references: [id], onUpdate: NoAction)
  coach          Coach          @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  emailAccount   EmailAccount   @relation(fields: [emailAccountID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([clientID], map: "idx_email_threads_client_id")
  @@index([coachID], map: "idx_email_threads_coach_id")
  @@map("email_threads")
}

model EventOutbox {
  id           String            @id @default(uuid()) @db.Uuid
  eventID      String            @unique @db.Uuid
  eventType    String            @db.VarChar(100)
  routingKey   String            @db.VarChar(100)
  payload      String // JSON as string for cross-service compatibility
  status       EventOutboxStatus @default(pending)
  retryCount   Int               @default(0)
  maxRetries   Int               @default(3)
  lastError    String?
  publishedAt  DateTime?         @db.Timestamptz(6)
  scheduledFor DateTime?         @db.Timestamptz(6)
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime          @updatedAt @db.Timestamptz(6)

  @@index([status, scheduledFor])
  @@index([eventType])
  @@index([createdAt])
  @@map("event_outbox")
}

enum IntegrationType {
  course
  social
  app
}

model Integration {
  id              String          @id @default(uuid()) @db.Uuid
  coachID         String          @db.Uuid
  integrationType IntegrationType
  platformName    String          @db.VarChar(100)
  accessToken     String?
  refreshToken    String?
  tokenExpiresAt  DateTime?       @db.Timestamptz(6)
  apiKey          String?
  webhookSecret   String?         @db.VarChar(255)
  config          Json?           @default("{}")
  syncSettings    Json?           @default("{}")
  isActive        Boolean?        @default(true)
  lastSyncAt      DateTime?       @db.Timestamptz(6)
  syncError       String?
  createdAt       DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?       @default(now()) @db.Timestamptz(6)
  coach           Coach           @relation(fields: [coachID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  webhookEvents   WebhookEvent[]

  @@index([coachID], map: "idx_integrations_coach_id")
  @@map("integrations")
}

// Addition to libs/api/database/prisma/schema.prisma

enum MediaProvider {
  cloudinary
  vimeo
  cloudfront
  aws_s3
}

enum MediaResourceType {
  image
  video
  raw
}

model MediaFile {
  id           String            @id @default(uuid()) @db.Uuid
  userID       String            @db.Uuid
  publicID     String            @unique @db.VarChar(255)
  originalName String            @db.VarChar(500)
  url          String            @db.Text
  secureUrl    String            @db.Text
  format       String            @db.VarChar(20)
  resourceType MediaResourceType
  fileSize     BigInt
  width        Int?
  height       Int?
  duration     Int? // in seconds for videos
  folder       String?           @db.VarChar(255)
  tags         String[]
  metadata     Json              @default("{}")
  provider     MediaProvider
  providerData Json              @default("{}")
  isActive     Boolean           @default(true)
  createdAt    DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime          @updatedAt @db.Timestamptz(6)

  mediaAnalytics MediaAnalytics[]

  @@index([userID])
  @@index([resourceType])
  @@index([folder])
  @@index([tags])
  @@index([createdAt])
  @@map("media_files")
}

model MediaAnalytics {
  id              String   @id @default(uuid()) @db.Uuid
  mediaFileID     String   @db.Uuid
  date            DateTime @db.Date
  views           Int      @default(0)
  downloads       Int      @default(0)
  transformations Int      @default(0)
  bandwidthBytes  BigInt   @default(0)
  uniqueViewers   Int      @default(0)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  mediaFile MediaFile @relation(fields: [mediaFileID], references: [id], onDelete: Cascade)

  @@unique([mediaFileID, date])
  @@index([date])
  @@map("media_analytics")
}

model MediaTransformation {
  id           String    @id @default(uuid()) @db.Uuid
  mediaFileID  String    @db.Uuid
  userID       String    @db.Uuid
  requestedBy  String    @db.Uuid
  requestURL   String    @db.Text
  parameters   Json
  resultURL    String?   @db.Text
  status       String    @default("pending") @db.VarChar(20)
  errorMessage String?   @db.Text
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  completedAt  DateTime? @db.Timestamptz(6)

  @@index([mediaFileID])
  @@index([userID])
  @@index([status])
  @@index([createdAt])
  @@map("media_transformations")
}

// Updates to existing Notification model in schema.prisma

model Notification {
  id String @id @default(uuid()) @db.Uuid

  // Add unified user fields for multi-user support
  userID   String? @db.Uuid // Will replace coachID/adminID usage
  userType String? @db.VarChar(20) // 'coach', 'admin', 'client'

  type      String    @db.VarChar(50)
  title     String    @db.VarChar(255)
  message   String
  actionUrl String?
  isRead    Boolean?  @default(false)
  readAt    DateTime? @db.Timestamptz(6)
  priority  String?   @default("normal") @db.VarChar(20)
  metadata  Json?     @default("{}")
  createdAt DateTime? @default(now()) @db.Timestamptz(6)

  @@index([userID, userType], map: "idx_notifications_user")
  @@index([isRead], map: "idx_notifications_is_read")
  @@map("notifications")
}

// Add new models for notification system

model NotificationPreference {
  id           String   @id @default(uuid()) @db.Uuid
  userID       String   @db.Uuid
  userType     String   @db.VarChar(20) // 'coach', 'admin', 'client'
  emailEnabled Boolean  @default(true)
  pushEnabled  Boolean  @default(true)
  webhookUrl   String?  @db.VarChar(500)
  preferences  Json     @default("{}")
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userID, userType])
  @@index([userID])
  @@map("notification_preferences")
}

model NotificationDelivery {
  id             String    @id @default(uuid()) @db.Uuid
  notificationID String    @db.Uuid
  channel        String    @db.VarChar(50) // 'email', 'push', 'webhook'
  status         String    @default("pending") @db.VarChar(20) // 'pending', 'sent', 'delivered', 'failed'
  messageID      String?   @db.VarChar(255) // External provider message ID
  error          String?
  retryCount     Int       @default(0)
  deliveredAt    DateTime? @db.Timestamptz(6)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @db.Timestamptz(6)

  @@index([notificationID])
  @@index([status])
  @@index([channel])
  @@map("notification_deliveries")
}

model PlatformAnalytic {
  id                      String    @id @default(uuid()) @db.Uuid
  date                    DateTime  @unique @db.Date
  totalCoaches            Int?      @default(0)
  activeCoaches           Int?      @default(0)
  newCoaches              Int?      @default(0)
  churnedCoaches          Int?      @default(0)
  totalRevenue            Decimal?  @default(0.00) @db.Decimal(12, 2)
  monthlyRecurringRevenue Decimal?  @default(0.00) @db.Decimal(12, 2)
  churnRate               Decimal?  @default(0.00) @db.Decimal(5, 2)
  totalAiRequests         Int?      @default(0)
  totalAiTokens           Int?      @default(0)
  totalEmailsProcessed    Int?      @default(0)
  avgResponseTimeMs       Int?      @default(0)
  uptimePercentage        Decimal?  @default(100.00) @db.Decimal(5, 2)
  createdAt               DateTime? @default(now()) @db.Timestamptz(6)

  @@index([date], map: "idx_platform_analytics_date")
  @@map("platform_analytics")
}

model WebhookEvent {
  id             String       @id @default(uuid()) @db.Uuid
  integrationID  String?      @db.Uuid
  eventType      String       @db.VarChar(100)
  eventData      Json
  sourcePlatform String       @db.VarChar(100)
  status         String?      @default("pending") @db.VarChar(50)
  processedAt    DateTime?    @db.Timestamptz(6)
  errorMessage   String?
  retryCount     Int?         @default(0)
  createdAt      DateTime?    @default(now()) @db.Timestamptz(6)
  integration    Integration? @relation(fields: [integrationID], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([integrationID], map: "idx_webhook_events_integration_id")
  @@index([status], map: "idx_webhook_events_status")
  @@map("webhook_events")
}

model Transaction {
  id                String            @id @default(uuid()) @db.Uuid
  coachID           String            @db.Uuid
  subscriptionID    String?           @db.Uuid
  planID            String            @db.Uuid
  paymentMethodID   String?           @db.Uuid // NEW FIELD
  amount            Int
  currency          String            @default("USD")
  status            TransactionStatus @default(pending)
  paymentMethodType PaymentMethodType @default(stripe) // Keep for backward compatibility
  stripePaymentID   String?
  paypalOrderID     String?
  invoiceNumber     String?           @unique
  invoiceDate       DateTime
  dueDate           DateTime?
  paidAt            DateTime?
  description       String?
  metadata          Json?
  failureReason     String?
  refundReason      String?
  refundedAmount    Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  coach         Coach          @relation(fields: [coachID], references: [id], onDelete: Cascade)
  subscription  Subscription?  @relation(fields: [subscriptionID], references: [id], onDelete: SetNull)
  plan          Plan           @relation(fields: [planID], references: [id], onDelete: Restrict)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodID], references: [id], onDelete: SetNull) // NEW RELATION
  invoices      Invoice[]

  @@index([paymentMethodID], map: "idx_transactions_payment_method_id")
  @@map("transactions")
}

model PaymentMethod {
  id                    String            @id @default(uuid()) @db.Uuid
  coachID               String            @db.Uuid
  type                  PaymentMethodType
  isDefault             Boolean           @default(false)
  isActive              Boolean           @default(true)
  cardLast4             String?
  cardBrand             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  stripePaymentMethodID String?
  paypalEmail           String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  coach        Coach         @relation(fields: [coachID], references: [id], onDelete: Cascade)
  transactions Transaction[] // NEW RELATION

  @@map("payment_methods")
}

model Invoice {
  id             String        @id @default(uuid()) @db.Uuid
  coachID        String        @db.Uuid
  subscriptionID String?       @db.Uuid
  transactionID  String?       @db.Uuid
  invoiceNumber  String        @unique
  amount         Int
  currency       String        @default("USD")
  status         InvoiceStatus @default(draft)
  issueDate      DateTime      @default(now())
  dueDate        DateTime
  paidAt         DateTime?
  lineItems      Json
  subtotal       Int
  taxRate        Float?
  taxAmount      Int?
  discountAmount Int?
  total          Int
  notes          String?
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  coach          Coach         @relation(fields: [coachID], references: [id], onDelete: Cascade)
  subscription   Subscription? @relation(fields: [subscriptionID], references: [id], onDelete: SetNull)
  transaction    Transaction?  @relation(fields: [transactionID], references: [id], onDelete: SetNull)

  @@map("invoices")
}

model Plan {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @unique
  description   String?
  monthlyPrice  Int
  annualPrice   Int
  color         String?        @default("#7B21BA") @db.VarChar(50)
  maxClients    Int?
  maxAiAgents   Int?
  features      Json?
  isActive      Boolean        @default(true)
  isDeleted     Boolean        @default(false)
  deletedAt     DateTime?      @db.Timestamptz(6)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  transactions  Transaction[]
  paymentLinks  PaymentLink[]

  @@map("plans")
}

model Subscription {
  id                 String             @id @default(uuid()) @db.Uuid
  coachID            String             @db.Uuid
  planID             String             @db.Uuid
  status             SubscriptionStatus @default(active)
  billingCycle       BillingCycle       @default(monthly)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  canceledAt         DateTime?
  cancelReason       String?
  trialStart         DateTime?
  trialEnd           DateTime?
  nextBillingDate    DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  coach              Coach              @relation(fields: [coachID], references: [id], onDelete: Cascade)
  plan               Plan               @relation(fields: [planID], references: [id], onDelete: Restrict)
  transactions       Transaction[]
  invoices           Invoice[]

  @@map("subscription")
}

// Updated Message-related models for Prisma schema
// Replace the existing Conversation and DirectMessage models with these:

enum MessageType {
  text
  image
  video
  file
  system
}

model Conversation {
  id               String    @id @default(uuid()) @db.Uuid
  type             String    @db.VarChar(20) // 'direct', 'group'
  name             String?   @db.VarChar(255)
  participantIDs   String[] // Array of user IDs
  participantTypes String[] // Array of user types ('coach', 'admin', 'client')
  lastMessageID    String?   @db.Uuid
  lastMessageAt    DateTime? @db.Timestamptz(6)
  unreadCount      Json      @default("{}") // Object with userType:userID as keys
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime  @updatedAt @db.Timestamptz(6)

  messages DirectMessage[]

  @@index([participantIDs])
  @@index([lastMessageAt])
  @@index([isActive])
  @@map("conversations")
}

model DirectMessage {
  id               String      @id @default(uuid()) @db.Uuid
  conversationID   String      @db.Uuid
  senderID         String      @db.Uuid
  senderType       String      @db.VarChar(20) // 'coach', 'admin', 'client'
  senderName       String      @db.VarChar(255) // Denormalized for performance
  senderAvatarUrl  String?     @db.Text // Denormalized for performance
  type             MessageType @default(text)
  content          String      @db.Text
  mediaUrls        String[]    @default([])
  fileUrl          String?     @db.Text
  fileName         String?     @db.VarChar(255)
  fileSize         Int?
  isRead           Boolean     @default(false)
  readAt           DateTime?   @db.Timestamptz(6)
  isEdited         Boolean     @default(false)
  editedAt         DateTime?   @db.Timestamptz(6)
  replyToMessageID String?     @db.Uuid
  metadata         Json?       @default("{}")
  createdAt        DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime    @updatedAt @db.Timestamptz(6)

  conversation   Conversation    @relation(fields: [conversationID], references: [id], onDelete: Cascade)
  replyToMessage DirectMessage?  @relation("MessageReplies", fields: [replyToMessageID], references: [id])
  replies        DirectMessage[] @relation("MessageReplies")

  @@index([conversationID])
  @@index([senderID, senderType])
  @@index([senderName])
  @@index([isRead])
  @@index([createdAt])
  @@index([replyToMessageID])
  @@map("messages")
}

model MessageDelivery {
  id        String   @id @default(uuid()) @db.Uuid
  messageID String   @db.Uuid
  userID    String   @db.Uuid
  userType  String   @db.VarChar(20)
  status    String   @default("sent") @db.VarChar(20) // 'sent', 'delivered', 'read'
  timestamp DateTime @default(now()) @db.Timestamptz(6)

  @@unique([messageID, userID, userType])
  @@index([userID, userType])
  @@index([status])
  @@map("message_deliveries")
}

model ConversationParticipant {
  id             String    @id @default(uuid()) @db.Uuid
  conversationID String    @db.Uuid
  userID         String    @db.Uuid
  userType       String    @db.VarChar(20) // 'coach', 'admin', 'client'
  joinedAt       DateTime  @default(now()) @db.Timestamptz(6)
  leftAt         DateTime? @db.Timestamptz(6)
  isActive       Boolean   @default(true)
  role           String    @default("member") @db.VarChar(20) // 'admin', 'member'

  @@unique([conversationID, userID, userType])
  @@index([userID, userType])
  @@index([conversationID])
  @@index([isActive])
  @@map("conversation_participants")
}

model Lead {
  id              String           @id @default(uuid()) @db.Uuid
  coachID         String?          @db.Uuid
  leadType        LeadType         @default(coach_lead)
  name            String           @db.VarChar(100)
  email           String           @db.VarChar(255)
  phone           String?          @db.VarChar(20)
  source          String?          @db.VarChar(100)
  status          String           @default("contacted") @db.VarChar(50) // contacted, scheduled, converted, unresponsive
  meetingDate     DateTime?        @db.Timestamptz(6)
  meetingTime     String?          @db.VarChar(20)
  notes           String?
  answers         Json?
  qualified       Boolean?         @default(false)
  submittedAt     DateTime?        @db.Timestamptz(6)
  lastContactedAt DateTime?        @db.Timestamptz(6)
  convertedAt     DateTime?        @db.Timestamptz(6)
  createdAt       DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime         @updatedAt @db.Timestamptz(6)
  coach           Coach?           @relation(fields: [coachID], references: [id], onDelete: Cascade)
  emailSequences  EmailSequence[]
  scheduledEmails ScheduledEmail[]

  @@map("leads")
}

model ActivityLog {
  id         String   @id @default(uuid()) @db.Uuid
  userID     String   @db.Uuid
  userType   String   @db.VarChar(20) // "admin" or "coach"
  action     String   @db.VarChar(100)
  entityType String?  @db.VarChar(50)
  entityID   String?  @db.Uuid
  metadata   Json?
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  @@index([userID, userType])
  @@index([createdAt])
  @@map("activity_logs")
}

model SystemSetting {
  id          String   @id @default(uuid()) @db.Uuid
  category    String   @db.VarChar(50)
  key         String   @db.VarChar(100)
  value       Json
  description String?
  isPublic    Boolean  @default(false)
  updatedBy   String   @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  admin       Admin    @relation(fields: [updatedBy], references: [id])

  @@unique([category, key])
  @@map("system_settings")
}

model PaymentLink {
  id                  String    @id @default(uuid()) @db.Uuid
  coachID             String    @db.Uuid
  planID              String    @db.Uuid
  stripePaymentLinkID String    @unique
  paymentLinkUrl      String
  amount              Int
  currency            String    @default("USD")
  description         String?
  isActive            Boolean   @default(true)
  paymentsReceived    Int       @default(0)
  totalAmountReceived Int       @default(0)
  expiresAt           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  coach               Coach     @relation(fields: [coachID], references: [id], onDelete: Cascade)
  plan                Plan      @relation(fields: [planID], references: [id], onDelete: Restrict)

  @@map("payment_links")
}

model ScheduledEmail {
  id                String    @id @default(uuid()) @db.Uuid
  emailSequenceID   String?   @db.Uuid // Add this field
  leadID            String?   @db.Uuid
  coachID           String?   @db.Uuid
  clientID          String?   @db.Uuid
  to                String    @db.VarChar(255)
  subject           String    @db.VarChar(500)
  body              String    @db.Text
  sequenceOrder     Int
  scheduledFor      DateTime  @db.Timestamptz(6)
  sentAt            DateTime? @db.Timestamptz(6)
  status            String    @default("scheduled") @db.VarChar(50)
  errorMessage      Json?
  emailProvider     String?   @db.VarChar(50)
  providerMessageID String?
  metadata          Json?
  openedAt          DateTime? @db.Timestamptz(6)
  clickedAt         DateTime? @db.Timestamptz(6)
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @db.Timestamptz(6)

  emailSequence EmailSequence? @relation(fields: [emailSequenceID], references: [id], onDelete: SetNull)
  lead          Lead?          @relation(fields: [leadID], references: [id], onDelete: Cascade)
  client        Client?        @relation(fields: [clientID], references: [id], onDelete: Cascade)
  coach         Coach?         @relation(fields: [coachID], references: [id], onDelete: Cascade)

  @@index([scheduledFor, status])
  @@index([leadID])
  @@index([coachID])
  @@index([clientID])
  @@index([emailSequenceID])
  @@map("scheduled_emails")
}

model EmailSequence {
  id          String   @id @default(uuid()) @db.Uuid
  leadID      String?  @db.Uuid
  coachID     String?  @db.Uuid
  clientID    String?  @db.Uuid
  name        String   @db.VarChar(255)
  status      String   @db.VarChar(50)
  sequence    Json
  description String?
  triggerType String   @db.VarChar(50)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  lead            Lead?            @relation(fields: [leadID], references: [id], onDelete: Cascade)
  coach           Coach?           @relation(fields: [coachID], references: [id], onDelete: Cascade)
  client          Client?          @relation(fields: [clientID], references: [id], onDelete: Cascade)
  scheduledEmails ScheduledEmail[]

  @@index([coachID])
  @@index([leadID])
  @@index([clientID])
  @@map("email_sequences")
}
